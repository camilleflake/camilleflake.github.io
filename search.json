[
  {
    "objectID": "exploration.html",
    "href": "exploration.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Data Exploration"
    ]
  },
  {
    "objectID": "exploration.html#title-2-header",
    "href": "exploration.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Data Exploration"
    ]
  },
  {
    "objectID": "Cleansing_Exploration/project1.html",
    "href": "Cleansing_Exploration/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Exploration/project3.html",
    "href": "Cleansing_Exploration/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "full_stack.html",
    "href": "full_stack.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Full Stack"
    ]
  },
  {
    "objectID": "full_stack.html#title-2-header",
    "href": "full_stack.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Full Stack"
    ]
  },
  {
    "objectID": "Competition/project1.html",
    "href": "Competition/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Competition",
      "Project 1"
    ]
  },
  {
    "objectID": "Competition/project3.html",
    "href": "Competition/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Competition",
      "Project 3"
    ]
  },
  {
    "objectID": "story_telling.html",
    "href": "story_telling.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Story Telling"
    ]
  },
  {
    "objectID": "story_telling.html#title-2-header",
    "href": "story_telling.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Story Telling"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "index.html#title-2-header",
    "href": "index.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "Full_Stack/project1.html",
    "href": "Full_Stack/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Full Stack",
      "Project 1"
    ]
  },
  {
    "objectID": "Full_Stack/project3.html",
    "href": "Full_Stack/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Full Stack",
      "Project 3"
    ]
  },
  {
    "objectID": "Story_Telling/project2.html",
    "href": "Story_Telling/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Story Telling",
      "Project 2"
    ]
  },
  {
    "objectID": "Story_Telling/project4.html",
    "href": "Story_Telling/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Story Telling",
      "Project 4"
    ]
  },
  {
    "objectID": "Story_Telling/project5.html",
    "href": "Story_Telling/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Story Telling",
      "Project 5"
    ]
  },
  {
    "objectID": "Cleansing_Projects/project1.html",
    "href": "Cleansing_Projects/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Cleansing",
      "Project 1"
    ]
  },
  {
    "objectID": "Cleansing_Projects/project3.html",
    "href": "Cleansing_Projects/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Cleansing",
      "Project 3"
    ]
  },
  {
    "objectID": "ml.html",
    "href": "ml.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Machine Learning"
    ]
  },
  {
    "objectID": "ml.html#title-2-header",
    "href": "ml.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Machine Learning"
    ]
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Camille Flake - Data Science Portfolio",
    "section": "",
    "text": "Camille Flake\n\n255-7264 · camilleflake71@gmail.com\n\nSUMMARY\nHardworking individual with an energetic and responsible approach over five years working in a fast-paced environment. Always seeking ways to take on extra work and assist team members.\nEDUCATION\nEastern Arizona College · Associates in Business Administration · Graduated 2021\nBrigham Young University-Idaho ·Accounting Major · Expected Graduation Dec 2024\n\nData Analytics Minor\nStudent Accounting Society\n\nSKILLS\n\nExcel\nCommunication\nCustomer Service\nTime Management\nMy SQL Server\nVBA\n\nEXPERIENCE\nTax Intern · Fox Peterson · Jan 2024–April 2024\n\nDid accounting work using quickBooks\nUltraTax Software\nPrepared many tax returns\nWork efficiently with coworkers\n\nManufacturer · Precision Trim · October 2017–August 2022 · July 2023–August 2023\n\nEffectively communicating and coordinating with coworkers\nProducing hand-made products for world-wide customer base\nUsed organizational skills to meet productivity requirements\nMaintained clean, safe working environment\n\nVolunteer · Shepherd’s Kitchen Food Bank · June 2018-August 2021\n\nDistribution of food to community members in need\nOrganized store and food distribution\nCommunicated with customers\nWorked efficiently with other volunteers\n\nVolunteer · Elections · 2018-2020\n\nChecked identifications\nCommunicated with customers\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Machine_Learning/project1.html",
    "href": "Machine_Learning/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Machine Learning",
      "Project 1"
    ]
  },
  {
    "objectID": "Machine_Learning/project3.html",
    "href": "Machine_Learning/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Machine Learning",
      "Project 3"
    ]
  },
  {
    "objectID": "Machine_Learning/project5.html",
    "href": "Machine_Learning/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Machine Learning",
      "Project 5"
    ]
  },
  {
    "objectID": "Machine_Learning/project4.html",
    "href": "Machine_Learning/project4.html",
    "title": "Camille Flake - Data Science Portfolio",
    "section": "",
    "text": "title: “Client Report - [Project 4]” subtitle: “Course DS 250” author: “[Camille Flake]” format: html: self-contained: true page-layout: full title-block-banner: true toc: true toc-depth: 3 toc-location: body number-sections: false html-math-method: katex code-fold: true code-summary: “Show the code” code-overflow: wrap code-copy: hover code-tools: source: false toggle: true caption: See code execute: warning: false",
    "crumbs": [
      "Machine Learning",
      "Project 4"
    ]
  },
  {
    "objectID": "Machine_Learning/project4.html#elevator-pitch",
    "href": "Machine_Learning/project4.html#elevator-pitch",
    "title": "Camille Flake - Data Science Portfolio",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nOur model leverages Gradient Boosting techniques to accurately classify whether homes in Colorado were built before or after 1980, achieving a high accuracy of 93%. By analyzing key features of homes, the model effectively distinguishes older homes with minimal false predictions. This solution is both accurate and actionable, helping you meet your public safety goals efficiently.",
    "crumbs": [
      "Machine Learning",
      "Project 4"
    ]
  },
  {
    "objectID": "Machine_Learning/project4.html#questiontask-1",
    "href": "Machine_Learning/project4.html#questiontask-1",
    "title": "Camille Flake - Data Science Portfolio",
    "section": "Question|Task 1",
    "text": "Question|Task 1\nCreate 2-3 charts that evaluate potential relationships between the home variables and before1980. Explain what you learn from the charts that could help a machine learning algorithm.\nThe first chart can contribute to the classification of homes built before 1980, as there is a cluster around the lower value of finished basements and a smaller living area for that predicted time.\nChart 2 indicates that the number of stories is a srong indicator for homes built pre 1980, because it shows most homes to be one story compared to two story which shows about half the number of one story homes.\nChart 3 shows stories, living area, and number of bedrooms to be the features with the strongest correlation to homes built before 1980 and therefore should be prioritized. Features like finished basement does not have as strong of a correlation but is still useful when combined with other variables.\n\n# Include and execute your code here\nimport pandas as pd\nfrom lets_plot import *\nLetsPlot.setup_html()\n\nimport sys\n!{sys.executable} -m pip install scikit-learn\n\n# %% \n# scikit learn froms\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import metrics\n\n\n            \n            \n            \n\n\nRequirement already satisfied: scikit-learn in /opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages (1.6.0)\nRequirement already satisfied: numpy&gt;=1.19.5 in /opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages (from scikit-learn) (2.2.0)\nRequirement already satisfied: scipy&gt;=1.6.0 in /opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages (from scikit-learn) (1.14.1)\nRequirement already satisfied: joblib&gt;=1.2.0 in /opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages (from scikit-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl&gt;=3.1.0 in /opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages (from scikit-learn) (3.5.0)\n\n\n\n# %%\n# load data\ndwellings_ml = pd.read_csv(\"https://github.com/byuidatascience/data4dwellings/raw/master/data-raw/dwellings_ml/dwellings_ml.csv\") \n\n\nh_subset = dwellings_ml.filter(\n    ['livearea', 'finbsmnt', 'basement', \n    'yearbuilt', 'nocars', 'numbdrm', 'numbaths', 'before1980',\n    'stories', 'yrbuilt']).sample(500)\n\nh_subset = h_subset.dropna(subset=['livearea', 'finbsmnt', 'before1980', 'basement'])\n\n\nchart = ggplot(h_subset, aes(x='livearea', y='finbsmnt', color='before1980')) + geom_point()# + facet_wrap('~basement')\nchart.show()\n\n   \n   \n\n\n\n# %%\ncorr = h_subset.drop(columns='before1980').corr().applymap(lambda x: f'{x:.2f}')\n\n/tmp/ipykernel_2295/3560486731.py:2: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n# %%\ncorr_chart = ggplot(corr.reset_index().melt(id_vars='index'), aes(x='index', y='variable', fill='value')) + geom_tile() + geom_text(aes(label='value'), color='white', size=6) + scale_fill_brewer(palette='RdYlBu')\ncorr_chart.show()\n\n   \n   \n\n\n\n# %%\n## Now predict before 1980 \nX_pred = dwellings_ml.drop(dwellings_ml.filter(regex = 'before1980|yrbuilt').columns, axis = 1)\n\ny_pred = dwellings_ml.filter(regex = \"before1980\")\n\nX_train, X_test, y_train, y_test = train_test_split(X_pred, y_pred, test_size = .35, random_state = 76)  \n\n\nX_train = X_train.drop(columns=['parcel'], errors='ignore')\nX_test = X_test.drop(columns=['parcel'], errors='ignore')\n\n\n#%%\ny_test\n\n\n\n\n\n\n\n\nbefore1980\n\n\n\n\n16075\n0\n\n\n10563\n0\n\n\n14087\n1\n\n\n9622\n0\n\n\n2172\n1\n\n\n...\n...\n\n\n8758\n0\n\n\n8326\n1\n\n\n20799\n1\n\n\n8382\n0\n\n\n6986\n0\n\n\n\n\n8020 rows × 1 columns\n\n\n\n\n# %%\nX_train\n\n\n\n\n\n\n\n\nabstrprd\nlivearea\nfinbsmnt\nbasement\ntotunits\nstories\nnocars\nnumbdrm\nnumbaths\nsprice\n...\narcstyle_SPLIT LEVEL\narcstyle_THREE-STORY\narcstyle_TRI-LEVEL\narcstyle_TRI-LEVEL WITH BASEMENT\narcstyle_TWO AND HALF-STORY\narcstyle_TWO-STORY\nqualified_Q\nqualified_U\nstatus_I\nstatus_V\n\n\n\n\n1153\n1112\n1876\n0\n1018\n1\n2\n2\n3\n3\n180000\n...\n0\n0\n0\n0\n0\n1\n1\n0\n1\n0\n\n\n10550\n1112\n1450\n225\n674\n1\n1\n2\n3\n3\n221500\n...\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n\n\n14892\n1112\n953\n0\n0\n1\n1\n0\n2\n1\n102000\n...\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n\n\n15555\n1114\n1098\n1006\n1098\n1\n1\n1\n2\n2\n329000\n...\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n\n\n6806\n1112\n971\n508\n870\n1\n1\n2\n2\n2\n195000\n...\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n22810\n1130\n1441\n0\n0\n1\n1\n2\n3\n2\n195000\n...\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n\n\n6528\n1112\n1725\n0\n0\n1\n2\n2\n3\n3\n283000\n...\n0\n0\n0\n0\n0\n1\n1\n0\n1\n0\n\n\n9607\n1130\n1001\n0\n0\n1\n1\n0\n1\n1\n410000\n...\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n\n\n12279\n1112\n750\n0\n0\n1\n1\n2\n2\n1\n65000\n...\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n\n\n2721\n1114\n1137\n0\n0\n1\n3\n1\n2\n2\n123900\n...\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n\n\n\n\n14893 rows × 48 columns\n\n\n\n\n#new\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nX_train = X_train.drop(columns=['parcel'], errors='ignore')\nX_test = X_test.drop(columns=['parcel'], errors='ignore')\n\n# Instantiate the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Fit the model on the training data\n#model.fit(X_train, y_train)\n\n# Make predictions on the test data\n#y_pred = model.predict(X_test)\n\n# Evaluate the model\n#print(classification_report(y_test, y_pred))\n\n\n# Predict on the test set\n#y_pred = model.predict(X_test)\n\n\nfrom sklearn.metrics import classification_report\n\n# Detailed classification report\n#print(classification_report(y_test, y_pred))\n\nChart 1:\n\n# Scatterplot of livearea vs finbsmnt by before1980\n\nchart1 = ggplot(h_subset, aes(x='livearea', y='finbsmnt', color='before1980')) + geom_point() + \\\n    ggtitle('Living Area vs. Finished Basement by Before1980') + \\\n    xlab('Living Area (sq ft)') + ylab('Finished Basement Area (sq ft)')\nchart1.show()\n\n   \n   \n\n\nChart 2:\n\n## Question 1|Chart 2\n\n# Calculate correlation matrix and round values\ncorr = h_subset.corr()\ncorr_rounded = corr.reset_index().melt(id_vars='index')\ncorr_rounded['value'] = corr_rounded['value'].round(2)\n\n# Correlation heatmap\ncorr_chart = ggplot(corr_rounded, aes(x='index', y='variable', fill='value')) + \\\n    geom_tile() + geom_text(aes(label='value'), color='white', size=8) + \\\n    scale_fill_gradient2(low='blue', mid='white', high='red', midpoint=0) + \\\n    ggtitle('Correlation Heatmap of Home Variables')\ncorr_chart.show()\n\n   \n   \n\n\nChart 3:\n\n## Question 1|Chart 3\n\n# Distribution of stories by before1980\nchart3 = ggplot(h_subset, aes(x='stories', fill='before1980')) + \\\n    geom_bar(position='dodge') + \\\n    ggtitle('Number of Stories by Before1980') + \\\n    xlab('Number of Stories') + ylab('Count')\nchart3.show()",
    "crumbs": [
      "Machine Learning",
      "Project 4"
    ]
  },
  {
    "objectID": "Machine_Learning/project4.html#questiontask-2",
    "href": "Machine_Learning/project4.html#questiontask-2",
    "title": "Camille Flake - Data Science Portfolio",
    "section": "Question|Task 2",
    "text": "Question|Task 2\nBuild a classification model labeling houses as being built “before 1980” or “during or after 1980”. Your goal is to reach or exceed 90% accuracy. Explain your final model choice (algorithm, tuning parameters, etc) and describe what other models you tried.\nThe model I chose is the Gradient Boosting Classifier. It’s accuracy is 93.13% comared to the next best, Decision Tree Classifier with 90.05%. I also did a Logistic Regression model and a Random Forest model. However neither reached 90%. I included all models below to show the work.\nLogistic Regression Model\n\n# Drop the parcel column\n#X_train = X_train.drop('parcel', axis=1)\n#X_test = X_test.drop('parcel', axis=1)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Train Logistic Regression\nlog_model = LogisticRegression(max_iter=1000, random_state=76)\nlog_model.fit(X_train, y_train.values.ravel())  # Flatten y_train for compatibility\n\n# Predict and evaluate\ny_pred_log = log_model.predict(X_test)\naccuracy_log = accuracy_score(y_test, y_pred_log)\nprint(f\"Logistic Regression Accuracy: {accuracy_log:.2%}\")\n\nLogistic Regression Accuracy: 83.78%\n\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning:\n\nlbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n\n\n\nDecision Treel Model\n\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Train Decision Tree\ndt_model = DecisionTreeClassifier(max_depth=10, random_state=76)\ndt_model.fit(X_train, y_train.values.ravel())\n\n# Predict and evaluate\ny_pred_dt = dt_model.predict(X_test)\naccuracy_dt = accuracy_score(y_test, y_pred_dt)\nprint(f\"Decision Tree Accuracy: {accuracy_dt:.2%}\")\n\nDecision Tree Accuracy: 90.05%\n\n\nRandom Forest Model\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Train Random Forest\nrf_model = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=76)\nrf_model.fit(X_train, y_train.values.ravel())\n\n# Predict and evaluate\ny_pred_rf = rf_model.predict(X_test)\naccuracy_rf = accuracy_score(y_test, y_pred_rf)\nprint(f\"Random Forest Accuracy: {accuracy_rf:.2%}\")\n\nRandom Forest Accuracy: 89.66%\n\n\nGradient Boosting Model\n\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Train Gradient Boosting\ngb_model = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=10, random_state=76)\ngb_model.fit(X_train, y_train.values.ravel())\n\n# Predict and evaluate\ny_pred_gb = gb_model.predict(X_test)\naccuracy_gb = accuracy_score(y_test, y_pred_gb)\nprint(f\"Gradient Boosting Accuracy: {accuracy_gb:.2%}\")\n\nGradient Boosting Accuracy: 93.03%",
    "crumbs": [
      "Machine Learning",
      "Project 4"
    ]
  },
  {
    "objectID": "Machine_Learning/project4.html#questiontask-3",
    "href": "Machine_Learning/project4.html#questiontask-3",
    "title": "Camille Flake - Data Science Portfolio",
    "section": "Question|Task 3",
    "text": "Question|Task 3\nJustify your classification model by discussing the most important features selected by your model. This discussion should include a feature importance chart and a description of the features.\nThe most important feature selected from the Gradient Boosting model and as shown in the chart below is arcstyle_ONE-STORY. Homes with a one-story architectural style were the most important feature. One-story homes are more common in older constructions, making this a strong predictor.\nThe next most important feature is gartype_Att. Attached garages are more common in newer homes, helping differentiate homes built before and after 1980.\nThe third most important is homes with quality_C classification reflect specific building standards or materials, often indicative of construction time periods.\nThe livearea. The total living area is a significant feature, as older homes often have smaller living spaces.\nThe basement. The presence and size of basements contribute to distinguishing between older and newer homes.\nHow many stories in a home reflects architectural trends, with single-story homes appearing more often in older constructions.\nThe remaining features include tasp, sprice, numbaths, and abstrprd. These last few contribute by informing us of market trends, home characteristics, the sales price, and time-sensitive data.\nThis model was able to identify specific trends in the construction of houses built before 1980. The combination of the features identified can give the client a strong predictor of whether a house was built pre 1980.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Extract feature importances\nimportances = gb_model.feature_importances_\nfeature_names = X_train.columns\n\n# Create a DataFrame of features and their importance\nimportance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})\nimportance_df = importance_df.sort_values(by='Importance', ascending=False)\n\n# Display the top 10 features\nprint(importance_df.head(10))\n\n               Feature  Importance\n37  arcstyle_ONE-STORY    0.249744\n25         gartype_Att    0.124531\n22           quality_C    0.114646\n1             livearea    0.102244\n3             basement    0.048565\n5              stories    0.040330\n12                tasp    0.036233\n9               sprice    0.031121\n8             numbaths    0.026415\n0             abstrprd    0.026217\n\n\n\n# Plot the top 10 features\nplt.figure(figsize=(10, 6))\nplt.barh(importance_df['Feature'][:10][::-1], importance_df['Importance'][:10][::-1], color='skyblue')\nplt.title('Top 10 Most Important Features (Gradient Boosting)')\nplt.xlabel('Feature Importance')\nplt.ylabel('Feature')\nplt.show()",
    "crumbs": [
      "Machine Learning",
      "Project 4"
    ]
  },
  {
    "objectID": "Machine_Learning/project4.html#questiontask-4",
    "href": "Machine_Learning/project4.html#questiontask-4",
    "title": "Camille Flake - Data Science Portfolio",
    "section": "Question|Task 4",
    "text": "Question|Task 4\nDescribe the quality of your classification model using 2-3 different evaluation metrics. You also need to explain how to interpret each of the evaluation metrics you use.\nI am using the Accuracy, Precision/Recall (F1-Score), and the Confusion Matrix. The accuracy matrix shows the overall measure of the model’s performance. In this case, 93.13%. This means 93% of all homes were correctly classified as pre-1980 or post-1980.\nThe Precision/Recall(F1-Score) Shows the scores for precision, recall, and f1-score, which are the following range respectively: .9, .91, .91 and .95, .94, .95. It then shows the accuracy, magro average, and the weighted average of those scores, all of them being 93%. Precision ensures it doesn’t overpredict values. High recall ensures the model correctly identifies most homes. F1-Score balances Precision and Recall, showing strong performance in both.\nBetween the actual and predicted number, the confusion matrix shows pre-1980 correctly classified at 4,755. Post-1980 correctly classified at 2,714. Post-1980 misclassified as Pre-1980 at 266. Pre-1980 misclassified as Post-1980 at 285. The result is that the model performs well, as it has low misclassifications compared to the number correctly classified.\n\nfrom sklearn.metrics import accuracy_score\n\n# Accuracy\naccuracy = accuracy_score(y_test, y_pred_gb)\nprint(f\"Accuracy: {accuracy:.2%}\")\n\nAccuracy: 93.03%\n\n\n\nfrom sklearn.metrics import classification_report\n\n# Classification report\nprint(classification_report(y_test, y_pred_gb))\n\n              precision    recall  f1-score   support\n\n           0       0.90      0.91      0.91      2980\n           1       0.95      0.94      0.94      5040\n\n    accuracy                           0.93      8020\n   macro avg       0.92      0.93      0.93      8020\nweighted avg       0.93      0.93      0.93      8020\n\n\n\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred_gb)\n\n# Plot Confusion Matrix\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Post-1980', 'Pre-1980'], yticklabels=['Post-1980', 'Pre-1980'])\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix')\nplt.show()",
    "crumbs": [
      "Machine Learning",
      "Project 4"
    ]
  },
  {
    "objectID": "Machine_Learning/project2.html",
    "href": "Machine_Learning/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Machine Learning",
      "Project 2"
    ]
  },
  {
    "objectID": "cleansing.html",
    "href": "cleansing.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Data Cleansing"
    ]
  },
  {
    "objectID": "cleansing.html#title-2-header",
    "href": "cleansing.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Data Cleansing"
    ]
  },
  {
    "objectID": "Cleansing_Projects/project5.html",
    "href": "Cleansing_Projects/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Cleansing",
      "Project 5"
    ]
  },
  {
    "objectID": "Cleansing_Projects/project4.html",
    "href": "Cleansing_Projects/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Cleansing",
      "Project 4"
    ]
  },
  {
    "objectID": "Cleansing_Projects/project2.html",
    "href": "Cleansing_Projects/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Cleansing",
      "Project 2"
    ]
  },
  {
    "objectID": "Story_Telling/project3.html",
    "href": "Story_Telling/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Story Telling",
      "Project 3"
    ]
  },
  {
    "objectID": "Story_Telling/project1.html",
    "href": "Story_Telling/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Story Telling",
      "Project 1"
    ]
  },
  {
    "objectID": "Full_Stack/project5.html",
    "href": "Full_Stack/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Full Stack",
      "Project 5"
    ]
  },
  {
    "objectID": "Full_Stack/project4.html",
    "href": "Full_Stack/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Full Stack",
      "Project 4"
    ]
  },
  {
    "objectID": "Full_Stack/project2.html",
    "href": "Full_Stack/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Full Stack",
      "Project 2"
    ]
  },
  {
    "objectID": "competition.html",
    "href": "competition.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Competition"
    ]
  },
  {
    "objectID": "competition.html#title-2-header",
    "href": "competition.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics",
    "crumbs": [
      "Competition"
    ]
  },
  {
    "objectID": "Competition/project5.html",
    "href": "Competition/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Competition",
      "Project 5"
    ]
  },
  {
    "objectID": "Competition/project4.html",
    "href": "Competition/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Competition",
      "Project 4"
    ]
  },
  {
    "objectID": "Competition/project2.html",
    "href": "Competition/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top",
    "crumbs": [
      "Competition",
      "Project 2"
    ]
  },
  {
    "objectID": "Cleansing_Exploration/project5.html",
    "href": "Cleansing_Exploration/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Exploration/project4.html",
    "href": "Cleansing_Exploration/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Exploration/project2.html",
    "href": "Cleansing_Exploration/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  }
]